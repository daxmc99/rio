/*
Copyright 2020 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type StackHandler func(string, *v1.Stack) (*v1.Stack, error)

type StackController interface {
	generic.ControllerMeta
	StackClient

	OnChange(ctx context.Context, name string, sync StackHandler)
	OnRemove(ctx context.Context, name string, sync StackHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() StackCache
}

type StackClient interface {
	Create(*v1.Stack) (*v1.Stack, error)
	Update(*v1.Stack) (*v1.Stack, error)
	UpdateStatus(*v1.Stack) (*v1.Stack, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Stack, error)
	List(namespace string, opts metav1.ListOptions) (*v1.StackList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Stack, err error)
}

type StackCache interface {
	Get(namespace, name string) (*v1.Stack, error)
	List(namespace string, selector labels.Selector) ([]*v1.Stack, error)

	AddIndexer(indexName string, indexer StackIndexer)
	GetByIndex(indexName, key string) ([]*v1.Stack, error)
}

type StackIndexer func(obj *v1.Stack) ([]string, error)

type stackController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.StacksGetter
	informer          informers.StackInformer
	gvk               schema.GroupVersionKind
}

func NewStackController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.StacksGetter, informer informers.StackInformer) StackController {
	return &stackController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromStackHandlerToHandler(sync StackHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Stack
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Stack))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *stackController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Stack))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateStackDeepCopyOnChange(client StackClient, obj *v1.Stack, handler func(obj *v1.Stack) (*v1.Stack, error)) (*v1.Stack, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *stackController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *stackController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *stackController) OnChange(ctx context.Context, name string, sync StackHandler) {
	c.AddGenericHandler(ctx, name, FromStackHandlerToHandler(sync))
}

func (c *stackController) OnRemove(ctx context.Context, name string, sync StackHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromStackHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *stackController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *stackController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *stackController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *stackController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *stackController) Cache() StackCache {
	return &stackCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *stackController) Create(obj *v1.Stack) (*v1.Stack, error) {
	return c.clientGetter.Stacks(obj.Namespace).Create(obj)
}

func (c *stackController) Update(obj *v1.Stack) (*v1.Stack, error) {
	return c.clientGetter.Stacks(obj.Namespace).Update(obj)
}

func (c *stackController) UpdateStatus(obj *v1.Stack) (*v1.Stack, error) {
	return c.clientGetter.Stacks(obj.Namespace).UpdateStatus(obj)
}

func (c *stackController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Stacks(namespace).Delete(name, options)
}

func (c *stackController) Get(namespace, name string, options metav1.GetOptions) (*v1.Stack, error) {
	return c.clientGetter.Stacks(namespace).Get(name, options)
}

func (c *stackController) List(namespace string, opts metav1.ListOptions) (*v1.StackList, error) {
	return c.clientGetter.Stacks(namespace).List(opts)
}

func (c *stackController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Stacks(namespace).Watch(opts)
}

func (c *stackController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Stack, err error) {
	return c.clientGetter.Stacks(namespace).Patch(name, pt, data, subresources...)
}

type stackCache struct {
	lister  listers.StackLister
	indexer cache.Indexer
}

func (c *stackCache) Get(namespace, name string) (*v1.Stack, error) {
	return c.lister.Stacks(namespace).Get(name)
}

func (c *stackCache) List(namespace string, selector labels.Selector) ([]*v1.Stack, error) {
	return c.lister.Stacks(namespace).List(selector)
}

func (c *stackCache) AddIndexer(indexName string, indexer StackIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Stack))
		},
	}))
}

func (c *stackCache) GetByIndex(indexName, key string) (result []*v1.Stack, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.Stack))
	}
	return result, nil
}

type StackStatusHandler func(obj *v1.Stack, status v1.StackStatus) (v1.StackStatus, error)

type StackGeneratingHandler func(obj *v1.Stack, status v1.StackStatus) ([]runtime.Object, v1.StackStatus, error)

func RegisterStackStatusHandler(ctx context.Context, controller StackController, condition condition.Cond, name string, handler StackStatusHandler) {
	statusHandler := &stackStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromStackHandlerToHandler(statusHandler.sync))
}

func RegisterStackGeneratingHandler(ctx context.Context, controller StackController, apply apply.Apply,
	condition condition.Cond, name string, handler StackGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &stackGeneratingHandler{
		StackGeneratingHandler: handler,
		apply:                  apply,
		name:                   name,
		gvk:                    controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterStackStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type stackStatusHandler struct {
	client    StackClient
	condition condition.Cond
	handler   StackStatusHandler
}

func (a *stackStatusHandler) sync(key string, obj *v1.Stack) (*v1.Stack, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type stackGeneratingHandler struct {
	StackGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *stackGeneratingHandler) Handle(obj *v1.Stack, status v1.StackStatus) (v1.StackStatus, error) {
	objs, newStatus, err := a.StackGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
