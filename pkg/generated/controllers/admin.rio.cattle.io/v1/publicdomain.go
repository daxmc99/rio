/*
Copyright 2020 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rio/pkg/apis/admin.rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/admin.rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/admin.rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/admin.rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type PublicDomainHandler func(string, *v1.PublicDomain) (*v1.PublicDomain, error)

type PublicDomainController interface {
	generic.ControllerMeta
	PublicDomainClient

	OnChange(ctx context.Context, name string, sync PublicDomainHandler)
	OnRemove(ctx context.Context, name string, sync PublicDomainHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() PublicDomainCache
}

type PublicDomainClient interface {
	Create(*v1.PublicDomain) (*v1.PublicDomain, error)
	Update(*v1.PublicDomain) (*v1.PublicDomain, error)
	UpdateStatus(*v1.PublicDomain) (*v1.PublicDomain, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.PublicDomain, error)
	List(opts metav1.ListOptions) (*v1.PublicDomainList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PublicDomain, err error)
}

type PublicDomainCache interface {
	Get(name string) (*v1.PublicDomain, error)
	List(selector labels.Selector) ([]*v1.PublicDomain, error)

	AddIndexer(indexName string, indexer PublicDomainIndexer)
	GetByIndex(indexName, key string) ([]*v1.PublicDomain, error)
}

type PublicDomainIndexer func(obj *v1.PublicDomain) ([]string, error)

type publicDomainController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.PublicDomainsGetter
	informer          informers.PublicDomainInformer
	gvk               schema.GroupVersionKind
}

func NewPublicDomainController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.PublicDomainsGetter, informer informers.PublicDomainInformer) PublicDomainController {
	return &publicDomainController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromPublicDomainHandlerToHandler(sync PublicDomainHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.PublicDomain
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.PublicDomain))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *publicDomainController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.PublicDomain))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdatePublicDomainDeepCopyOnChange(client PublicDomainClient, obj *v1.PublicDomain, handler func(obj *v1.PublicDomain) (*v1.PublicDomain, error)) (*v1.PublicDomain, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *publicDomainController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *publicDomainController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *publicDomainController) OnChange(ctx context.Context, name string, sync PublicDomainHandler) {
	c.AddGenericHandler(ctx, name, FromPublicDomainHandlerToHandler(sync))
}

func (c *publicDomainController) OnRemove(ctx context.Context, name string, sync PublicDomainHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromPublicDomainHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *publicDomainController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *publicDomainController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *publicDomainController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *publicDomainController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *publicDomainController) Cache() PublicDomainCache {
	return &publicDomainCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *publicDomainController) Create(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains().Create(obj)
}

func (c *publicDomainController) Update(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains().Update(obj)
}

func (c *publicDomainController) UpdateStatus(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains().UpdateStatus(obj)
}

func (c *publicDomainController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.PublicDomains().Delete(name, options)
}

func (c *publicDomainController) Get(name string, options metav1.GetOptions) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains().Get(name, options)
}

func (c *publicDomainController) List(opts metav1.ListOptions) (*v1.PublicDomainList, error) {
	return c.clientGetter.PublicDomains().List(opts)
}

func (c *publicDomainController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.PublicDomains().Watch(opts)
}

func (c *publicDomainController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PublicDomain, err error) {
	return c.clientGetter.PublicDomains().Patch(name, pt, data, subresources...)
}

type publicDomainCache struct {
	lister  listers.PublicDomainLister
	indexer cache.Indexer
}

func (c *publicDomainCache) Get(name string) (*v1.PublicDomain, error) {
	return c.lister.Get(name)
}

func (c *publicDomainCache) List(selector labels.Selector) ([]*v1.PublicDomain, error) {
	return c.lister.List(selector)
}

func (c *publicDomainCache) AddIndexer(indexName string, indexer PublicDomainIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.PublicDomain))
		},
	}))
}

func (c *publicDomainCache) GetByIndex(indexName, key string) (result []*v1.PublicDomain, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.PublicDomain))
	}
	return result, nil
}

type PublicDomainStatusHandler func(obj *v1.PublicDomain, status v1.PublicDomainStatus) (v1.PublicDomainStatus, error)

type PublicDomainGeneratingHandler func(obj *v1.PublicDomain, status v1.PublicDomainStatus) ([]runtime.Object, v1.PublicDomainStatus, error)

func RegisterPublicDomainStatusHandler(ctx context.Context, controller PublicDomainController, condition condition.Cond, name string, handler PublicDomainStatusHandler) {
	statusHandler := &publicDomainStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromPublicDomainHandlerToHandler(statusHandler.sync))
}

func RegisterPublicDomainGeneratingHandler(ctx context.Context, controller PublicDomainController, apply apply.Apply,
	condition condition.Cond, name string, handler PublicDomainGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &publicDomainGeneratingHandler{
		PublicDomainGeneratingHandler: handler,
		apply:                         apply,
		name:                          name,
		gvk:                           controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterPublicDomainStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type publicDomainStatusHandler struct {
	client    PublicDomainClient
	condition condition.Cond
	handler   PublicDomainStatusHandler
}

func (a *publicDomainStatusHandler) sync(key string, obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type publicDomainGeneratingHandler struct {
	PublicDomainGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *publicDomainGeneratingHandler) Handle(obj *v1.PublicDomain, status v1.PublicDomainStatus) (v1.PublicDomainStatus, error) {
	objs, newStatus, err := a.PublicDomainGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
